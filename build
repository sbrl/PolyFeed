#!/usr/bin/env bash
# Make sure the current directory is the location of this script to simplify matters
cd "$(dirname "$(readlink -f $0)")" || exit 1;
################
### Settings ###
################

# The name of this project
project_name="PolyFeed";

# The path to the lantern build engine git submodule
lantern_path="./lantern-build-engine";

###
# Custom Settings
###

# Deployment settings
deploy_ssh_user="ci";
deploy_ssh_host="apt.starbeamrainbowlabs.com";
deploy_ssh_port="22";
deploy_root_dir="CIAptPackages";

###############################################################################

# Check out the lantern git submodule if needed
if [ ! -f "${lantern_path}/lantern.sh" ]; then git submodule update --init "${lantern_path}"; fi

# shellcheck disable=SC1090
source "${lantern_path}/lantern.sh";

if [[ "$#" -lt 1 ]]; then
	echo -e "${FBLE}${project_name}${RS} build script";
	echo -e "    by Starbeamrainbowlabs";
	# shellcheck disable=SC2154
	echo -e "${LC}Powered by the lantern build engine, v${version}${RS}";
	echo -e "";
	echo -e "${CSECTION}Usage${RS}";
	echo -e "    ./build ${CTOKEN}{action}${RS} ${CTOKEN}{action}${RS} ${CTOKEN}{action}${RS} ...";
	echo -e "";
	echo -e "${CSECTION}Available actions${RS}";
	echo -e "    ${CACTION}setup${RS}  - Do initial setup";
	echo -e "    ${CACTION}ci${RS}     - Execute CI tasks";
	echo -e "";
	
	exit 1;
fi

###############################################################################

task_setup() {
	task_begin "Checking environment";
	
	check_command git true;
	check_command msbuild true;
	check_command nuget true;
	check_command fpm true;
	check_command dpkg true;
	check_command awk true;
	
	task_end 0;
	
	
	task_begin "Initialising submodules";
	execute git submodule update --init;
	task_end $?;
}

task_build() {
	task_begin "Building PolyFeed for release";
	execute nuget restore;
	execute msbuild /p:Configuration=Release;
	execute chmod -x PolyFeed/bin/Release/*;
	execute chmod +x PolyFeed/bin/Release/*.exe;
	task_end $?;
}

task_package() {
	task_begin "Packaging as .deb";
	execute cp -ral PolyFeed/bin/Release PolyFeed/bin/polyfeed;
	version="$(awk '/version = / { print($3) }' PolyFeed.sln | tr -d '\n\r')-$(date +"%Y%m%dT%H%M").$(git rev-parse HEAD | head -c7)";
	fpm -s dir -t deb -n polyfeed \
	 	--epoch 0 -v "${version}" \
		--license MPL-2.0 \
		--architecture all \
		--maintainer "Starbeamrainbowlabs <feedback@starbeamrainbowlabs.com>" \
		--vendor "Starbeamrainbowlabs <feedback@starbeamrainbowlabs.com>" \
		--description "Create Atom feeds for websites that don't support it" \
		--url "https://github.com/sbrl/PolyFeed" \
		--depends mono-runtime \
		PolyFeed/bin/polyfeed=/usr/lib \
		polyfeed=/usr/bin/polyfeed;
	execute rm -r PolyFeed/bin/polyfeed;
	execute dpkg -c *.deb; # We don't know it's name :P
	task_end $?;
	
}

task_archive() {
	task_begin "Archiving artifacts";
	mv *.deb "${ARCHIVE}";
	task_end $?;
}

task_upload-release() {
	task_begin "Uploading release .deb file";
	
	sftp -i "${SSH_KEY_PATH}" -P "${deploy_ssh_port}" -o PasswordAuthentication=no "${deploy_ssh_user}@${deploy_ssh_host}" << SFTPCOMMANDS
put ./*.deb ${deploy_root_dir}
bye
SFTPCOMMANDS
	
	task_end $?;
}

task_ci() {
	tasks_run setup build package archive;
	
	if [[ "$(git tag --points-at HEAD | wc -l)" -gt 0 ]]; then
		echo "Found tag $(git tag --points-at HEAD), uploading release";
		tasks_run upload-release;
	fi
}

###############################################################################

tasks_run $@;
